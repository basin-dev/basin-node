/*
 * Basin RPC API
 *
 * Basin RPC API
 *
 * API version: 1.0.11
 * Contact: sestinj@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

type RegisterRequest struct {

	Url string `json:"url"`

	Permissions []PermissionJson `json:"permissions"`

	Adapter AdapterJson `json:"adapter"`

	Schema map[string]interface{} `json:"schema"`
}

// AssertRegisterRequestRequired checks if the required fields are not zero-ed
func AssertRegisterRequestRequired(obj RegisterRequest) error {
	elements := map[string]interface{}{
		"url": obj.Url,
		"permissions": obj.Permissions,
		"adapter": obj.Adapter,
		"schema": obj.Schema,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Permissions {
		if err := AssertPermissionJsonRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAdapterJsonRequired(obj.Adapter); err != nil {
		return err
	}
	return nil
}

// AssertRecurseRegisterRequestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RegisterRequest (e.g. [][]RegisterRequest), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRegisterRequestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRegisterRequest, ok := obj.(RegisterRequest)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRegisterRequestRequired(aRegisterRequest)
	})
}

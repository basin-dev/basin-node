// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "reflect"
import "encoding/json"

type CapabilityJsonAction string

var enumValues_CapabilityJsonAction = []interface{}{
	"read",
	"write",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CapabilityJsonAction) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CapabilityJsonAction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CapabilityJsonAction, v)
	}
	*j = CapabilityJsonAction(v)
	return nil
}

type CapabilityJson struct {
	// Action corresponds to the JSON schema field "action".
	Action *CapabilityJsonAction `json:"action,omitempty"`

	// Expiration corresponds to the JSON schema field "expiration".
	Expiration *string `json:"expiration,omitempty"`
}

const CapabilityJsonActionRead CapabilityJsonAction = "read"
const CapabilityJsonActionWrite CapabilityJsonAction = "write"

type PermissionJson struct {
	// Data corresponds to the JSON schema field "data".
	Data []string `json:"data,omitempty"`

	// Entities corresponds to the JSON schema field "entities".
	Entities []string `json:"entities,omitempty"`

	// Permissions corresponds to the JSON schema field "permissions".
	Permissions []CapabilityJson `json:"permissions,omitempty"`
}

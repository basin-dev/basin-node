/*
Basin RPC API

Basin RPC API

API version: 1.0.11
Contact: sestinj@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AdapterSchema struct for AdapterSchema
type AdapterSchema struct {
	AdapterName string `json:"adapterName"`
	Config map[string]interface{} `json:"config"`
}

// NewAdapterSchema instantiates a new AdapterSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdapterSchema(adapterName string, config map[string]interface{}) *AdapterSchema {
	this := AdapterSchema{}
	this.AdapterName = adapterName
	this.Config = config
	return &this
}

// NewAdapterSchemaWithDefaults instantiates a new AdapterSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdapterSchemaWithDefaults() *AdapterSchema {
	this := AdapterSchema{}
	return &this
}

// GetAdapterName returns the AdapterName field value
func (o *AdapterSchema) GetAdapterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdapterName
}

// GetAdapterNameOk returns a tuple with the AdapterName field value
// and a boolean to check if the value has been set.
func (o *AdapterSchema) GetAdapterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdapterName, true
}

// SetAdapterName sets field value
func (o *AdapterSchema) SetAdapterName(v string) {
	o.AdapterName = v
}

// GetConfig returns the Config field value
func (o *AdapterSchema) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *AdapterSchema) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *AdapterSchema) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o AdapterSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["adapterName"] = o.AdapterName
	}
	if true {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableAdapterSchema struct {
	value *AdapterSchema
	isSet bool
}

func (v NullableAdapterSchema) Get() *AdapterSchema {
	return v.value
}

func (v *NullableAdapterSchema) Set(val *AdapterSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAdapterSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAdapterSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdapterSchema(val *AdapterSchema) *NullableAdapterSchema {
	return &NullableAdapterSchema{value: val, isSet: true}
}

func (v NullableAdapterSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdapterSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



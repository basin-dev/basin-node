/*
Basin RPC API

Basin RPC API

API version: 1.0.11
Contact: sestinj@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RegisterRequest struct for RegisterRequest
type RegisterRequest struct {
	Url string `json:"url"`
	Permissions []PermissionJson `json:"permissions"`
	Adapter AdapterJson `json:"adapter"`
	Schema map[string]interface{} `json:"schema"`
}

// NewRegisterRequest instantiates a new RegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterRequest(url string, permissions []PermissionJson, adapter AdapterJson, schema map[string]interface{}) *RegisterRequest {
	this := RegisterRequest{}
	this.Url = url
	this.Permissions = permissions
	this.Adapter = adapter
	this.Schema = schema
	return &this
}

// NewRegisterRequestWithDefaults instantiates a new RegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterRequestWithDefaults() *RegisterRequest {
	this := RegisterRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *RegisterRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RegisterRequest) SetUrl(v string) {
	o.Url = v
}

// GetPermissions returns the Permissions field value
func (o *RegisterRequest) GetPermissions() []PermissionJson {
	if o == nil {
		var ret []PermissionJson
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetPermissionsOk() ([]PermissionJson, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *RegisterRequest) SetPermissions(v []PermissionJson) {
	o.Permissions = v
}

// GetAdapter returns the Adapter field value
func (o *RegisterRequest) GetAdapter() AdapterJson {
	if o == nil {
		var ret AdapterJson
		return ret
	}

	return o.Adapter
}

// GetAdapterOk returns a tuple with the Adapter field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetAdapterOk() (*AdapterJson, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Adapter, true
}

// SetAdapter sets field value
func (o *RegisterRequest) SetAdapter(v AdapterJson) {
	o.Adapter = v
}

// GetSchema returns the Schema field value
func (o *RegisterRequest) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *RegisterRequest) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

func (o RegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	if true {
		toSerialize["adapter"] = o.Adapter
	}
	if true {
		toSerialize["schema"] = o.Schema
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterRequest struct {
	value *RegisterRequest
	isSet bool
}

func (v NullableRegisterRequest) Get() *RegisterRequest {
	return v.value
}

func (v *NullableRegisterRequest) Set(val *RegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterRequest(val *RegisterRequest) *NullableRegisterRequest {
	return &NullableRegisterRequest{value: val, isSet: true}
}

func (v NullableRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



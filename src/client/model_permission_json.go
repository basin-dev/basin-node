/*
Basin RPC API

Basin RPC API

API version: 1.0.11
Contact: sestinj@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PermissionJson struct for PermissionJson
type PermissionJson struct {
	Data []string `json:"data,omitempty"`
	Capabilities []CapabilitySchema `json:"capabilities,omitempty"`
	Entities []string `json:"entities,omitempty"`
}

// NewPermissionJson instantiates a new PermissionJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionJson() *PermissionJson {
	this := PermissionJson{}
	return &this
}

// NewPermissionJsonWithDefaults instantiates a new PermissionJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionJsonWithDefaults() *PermissionJson {
	this := PermissionJson{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PermissionJson) GetData() []string {
	if o == nil || o.Data == nil {
		var ret []string
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionJson) GetDataOk() ([]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PermissionJson) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []string and assigns it to the Data field.
func (o *PermissionJson) SetData(v []string) {
	o.Data = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *PermissionJson) GetCapabilities() []CapabilitySchema {
	if o == nil || o.Capabilities == nil {
		var ret []CapabilitySchema
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionJson) GetCapabilitiesOk() ([]CapabilitySchema, bool) {
	if o == nil || o.Capabilities == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *PermissionJson) HasCapabilities() bool {
	if o != nil && o.Capabilities != nil {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []CapabilitySchema and assigns it to the Capabilities field.
func (o *PermissionJson) SetCapabilities(v []CapabilitySchema) {
	o.Capabilities = v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *PermissionJson) GetEntities() []string {
	if o == nil || o.Entities == nil {
		var ret []string
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionJson) GetEntitiesOk() ([]string, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *PermissionJson) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []string and assigns it to the Entities field.
func (o *PermissionJson) SetEntities(v []string) {
	o.Entities = v
}

func (o PermissionJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Capabilities != nil {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionJson struct {
	value *PermissionJson
	isSet bool
}

func (v NullablePermissionJson) Get() *PermissionJson {
	return v.value
}

func (v *NullablePermissionJson) Set(val *PermissionJson) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionJson) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionJson(val *PermissionJson) *NullablePermissionJson {
	return &NullablePermissionJson{value: val, isSet: true}
}

func (v NullablePermissionJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


